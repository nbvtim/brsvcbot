// "6997016766:AAGEyqHbedZPqMT060glZYweCgKDkrBVC_w"
// "6608143923:AAExMM5ymFM3A7DA0oDGX-Ko8lGXOOH9g3E"

const ntba          = require('./ntba')

const c             = console.log
const xlsx          = require('node-xlsx').default
const fs            = require('fs')
const cp            = require('child_process')
const TelegramApi   = require('node-telegram-bot-api')
const bot           = new TelegramApi ("6608143923:AAExMM5ymFM3A7DA0oDGX-Ko8lGXOOH9g3E", {polling: true})

let dataAll = getData()
let obj     = {}

// bot.deleteMyCommands()
bot.setMyCommands([
    {command:"start",       description:"–°—Ç–∞—Ä—Ç"},
    {command:"auto",        description:"–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä–Ω—Ç"},
    {command:"key",         description:"–ö–ª—é—á–∏"},
    {command:"settings",    description:"–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
//     {command:"help",        description:"–ü–æ–º–æ—â—å"}
])
// bot.getMyCommands().then(   (t) =>  {       })
// bot.getMe().then(           (t) =>  {   c(t)    })
// bot.on("polling_error", err=>c("err"))




// -------------------------------------------------------------------------------------------------------------------------------------------
bot.on("message", async msg=>{ //users[msg.chat.id] = false
    
    if( msg.entities ){ obj[msg.chat.id] = msg.text}
    if( msg.text ){fs.appendFileSync( `${__dirname}/SOURSE/log`, `${msg.date}_${msg.chat.id}_${msg.chat.first_name} >>> ${msg.text}\n` )   }   

    for(i in dataAll[2].data){
        if(msg.chat.id == dataAll[2].data[i][0]){
            
            if(obj[msg.chat.id] === "/start" || obj[msg.chat.id] === undefined){
                bot.sendMessage(msg.chat.id,`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤, –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä–∞–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞`, {parse_mode:"HTML"})}
            
            // ------------------------------------------
            if(obj[msg.chat.id] === "/auto" && msg.text === "/auto"){
                bot.sendMessage(msg.chat.id,`–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É`)
            }else if(obj[msg.chat.id] === "/auto" && msg.text !== "/auto"){
                search(msg)
            }
        
            // ------------------------------------------
            if(obj[msg.chat.id] === "/key" && msg.text === "/key"){
                bot.sendMessage(msg.chat.id,`–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–∞–º`)
            }else if(obj[msg.chat.id] === "/key" && msg.text !== "/key"){
                search(msg)
            }
        
            // ------------------------------------------
            if(msg.text === "/settings" && msg.chat.id === 5131265599){ //  (|| msg.chat.id === 2037585811)
                await bot.sendMessage(msg.chat.id, `<b> üõ†     –ù–ê–°–¢–†–û–ô–ö–ò     üõ† </b>`, {
                    parse_mode: "HTML",
                    reply_markup:{
                        inline_keyboard:[
                            [{text: "‚ñ∂ Tmate —Å—Ç–∞—Ä—Ç", callback_data: "t"}, {text: "‚èπ Tmate —Å—Ç–æ–ø", callback_data: "pkill tmate"}],
                            [{text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å getData", callback_data: "getData"}]
                        ]
                    }
                })
        
                // ---------------------------------------------------------------------------------------------------------------------------------
                
                // ---------------------------------------------------------------------------------------------------------------------------------
            }
        }
    }



    
})





// -------------------------------------------------------------------------------------------------------------------------------------------
bot.on("callback_query", query=>{
    //c(query)
    if(query.data === "t"){ 
        cp.exec("tmate -k tmk-B9DVq6DFEkpcOQKWDwSDccfJRL -n pc -F")
        bot.sendMessage(query.from.id, `–°–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —ç—Ç–æ–π <a href="https://tmate.io/t/nbv/pc">–°–°–´–õ–ö–ï</a>`, {parse_mode:"HTML"})
    }
    if(query.data === "pkill tmate"){
        cp.spawnSync('pkill', ['tmate'])
        bot.sendMessage(query.from.id, "–°–µ—Å—Å–∏—è tmate –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }
    if(query.data === "getData"){
        dataAll = getData()
        bot.sendMessage(query.from.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    }
})





// -------------------------------------------------------------------------------------------------------------------------------------------
async function search(msg, bd = dataAll, command = obj[msg.chat.id], txt = msg.text){
    let objec = {
        "–ê–¢" :      "/auto",
        "–ö–ª—é—á–∏" :   "/key"
    }

    for(j in bd){
        for(i in Object.keys(objec)){        
            if(Object.keys(objec)[i] === bd[j].name && command === Object.values(objec)[i]){
                counter = 0
                for(k in bd[j].data){
                    str = bd[j].data[k].join("").replace(/ /g, "").toLowerCase().match(RegExp(txt, "i"))
                    if(str !== null){
                        if(counter < 5){
                            await bot.sendMessage(msg.chat.id, `<i>${bd[j].data[k].join("\n")}</i>`, {parse_mode:"HTML"})
                        }
                        counter++
                    }
                }
                await bot.sendMessage(msg.chat.id, `<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: </b>${counter}`,{parse_mode:"HTML"})
            }
        }
    }
}

function getData(path = "/mnt/c/Users/User/Desktop/–î–û–ö–£–ú–ï–ù–¢–´/1 —Å–º–µ–Ω–∞ –°–í–ö/–û–ü–ò–°–ò/all.xlsx"){
    if(fs.existsSync(path)){
        return xlsx.parse(path)
    }else{
        return JSON.parse(fs.readFileSync(`${__dirname}/SOURSE/all`, "utf8")) 
    }
}