const c             = console.log
const xlsx          = require('node-xlsx').default
const fs            = require('fs')
const cp            = require('child_process')
const TelegramApi   = require('node-telegram-bot-api')
const bot           = new TelegramApi ("6608143923:AAExMM5ymFM3A7DA0oDGX-Ko8lGXOOH9g3E", {polling: true})


// function nbv(text = "14 6000"){
//     text = text.replace(/,/g, ".")
//     days = Number(text.split(" ")[0])
//     summ = Number(text.split(" ")[1])

//     return 32.5 * 11 * days - summ

    
    
// }c(nbv())





let dataAll = getData()
const obj = {}

// bot.deleteMyCommands()
bot.setMyCommands([
//     {command:"start",       description:"–°—Ç–∞—Ä—Ç"},
    {command:"auto",        description:"–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä–Ω—Ç"},
    {command:"key",         description:"–ö–ª—é—á–∏"},
    {command:"food",        description:"–ü–∏—Ç–∞–Ω–∏–µ"},
    {command:"settings",    description:"–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
//     {command:"help",        description:"–ü–æ–º–æ—â—å"}
])
// bot.getMyCommands().then(   (t) =>  {       })
// bot.getMe().then(           (t) =>  {       })
// bot.on("polling_error", err=>c("err"))

bot.on("message", async msg=>{ 
    
    if( msg.entities ){ obj[msg.chat.id] = msg.text}
    if( msg.text ){fs.appendFileSync( `${__dirname}/SOURSE/log`, `${msg.date}_${msg.chat.id}_${msg.chat.first_name} >>> ${msg.text}\n` )   }   

    if(security(msg)){

        /*–≤—Ä–µ–º–µ–Ω–Ω–∞—è*/if(obj[msg.chat.id] !== "/food" && obj[msg.chat.id] !== "/auto" && obj[msg.chat.id] != "/key" && obj[msg.chat.id] !== "/settings"){
            bot.sendMessage(msg.chat.id,`–í–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
–ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤:
 - –ø–æ–∏—Å–∫ –ø–æ –ê–¢ /auto
 - –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º /key
 - –ø–∏—Ç–∞–Ω–∏–µ /food`, {parse_mode:"HTML"})}
        
        //
        if(obj[msg.chat.id] === "/auto" && msg.text === "/auto"){
            bot.sendMessage(msg.chat.id,`–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É`)
        }else if(obj[msg.chat.id] === "/auto" && msg.text !== "/auto"){
            search(msg)
        }

        //
        if(obj[msg.chat.id] === "/key" && msg.text === "/key"){
            bot.sendMessage(msg.chat.id,`–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–∞–º`)
        }else if(obj[msg.chat.id] === "/key" && msg.text !== "/key"){
            search(msg)
        }

        //
        if(obj[msg.chat.id] === "/food" && msg.text === "/food"){
            bot.sendMessage(msg.chat.id,`<b>–ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é</b>\n<i>–í–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω –∏ —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫ <u>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</u></i>`,{parse_mode:"HTML"})
        }else if(obj[msg.chat.id] === "/food" && msg.text !== "/food"){
            msg.text = msg.text.replace(/,/g, ".")
            days = Number(msg.text.split(" ")[0])
            summ = Number(msg.text.split(" ")[1])
            bot.sendMessage(msg.chat.id,`–õ–∏–º–∏—Ç: ${32.5 * 11 * days}\n–û—Å—Ç–∞—Ç–æ–∫: ${32.5 * 11 * days - summ}`, {parse_mode:"HTML"})
        }

        //
        if(msg.text === "/settings" && msg.chat.id === 5131265599){
            bot.sendMessage(msg.chat.id, "<b> üõ† –ù–ê–°–¢–†–û–ô–ö–ò üõ† </b>", {
                parse_mode: "HTML",
                reply_markup:{
                    inline_keyboard:[
                        [{text: "‚ñ∂ Tmate —Å—Ç–∞—Ä—Ç", callback_data: "t"}, {text: "‚èπ Tmate —Å—Ç–æ–ø", callback_data: "pkill tmate"}],
                        [{text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å getData", callback_data: "getData"}]
                    ]
                }
            })
        }
    }

})




bot.on("callback_query", query=>{
    // c(query.from.id)
    if(query.data === "t"){ 
        cp.exec("tmate -k tmk-B9DVq6DFEkpcOQKWDwSDccfJRL -n pc -F")
        bot.sendMessage(query.from.id, `–°–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —ç—Ç–æ–π <a href="https://tmate.io/t/nbv/pc">–°–°–´–õ–ö–ï </a>`, {parse_mode:"HTML"})
    }
    if(query.data === "pkill tmate"){
        cp.spawnSync('pkill', ['tmate'])
        bot.sendMessage(query.from.id, "–°–µ—Å—Å–∏—è tmate –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    }
    if(query.data === "getData"){
        dataAll = getData()
        bot.sendMessage(query.from.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    }
})



async function search(msg, bd = dataAll, command = obj[msg.chat.id], txt = msg.text){
    let objec = {
        "–ê–¢" :      "/auto",
        "–ö–ª—é—á–∏" :   "/key"
    }

    for(j in bd){
        for(i in Object.keys(objec)){        
            if(Object.keys(objec)[i] === bd[j].name && command === Object.values(objec)[i]){
                counter = 0
                for(k in bd[j].data){
                    str = bd[j].data[k].join("").replace(/ /g, "").toLowerCase().match(RegExp(txt, "i"))
                    if(str !== null){
                        if(counter < 5){
                            await bot.sendMessage(msg.chat.id, `<i>${bd[j].data[k].join("\n")}</i>`, {parse_mode:"HTML"})
                        }
                        counter++
                    }
                }
                await bot.sendMessage(msg.chat.id, `<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: </b>${counter}`,{parse_mode:"HTML"})
            }
        }
    }
}

function getData(path = "/mnt/c/Users/User/Desktop/–î–û–ö–£–ú–ï–ù–¢–´/1 —Å–º–µ–Ω–∞ –°–í–ö/–û–ü–ò–°–ò/all.xlsx"){
    if(fs.existsSync(path)){
        return xlsx.parse(path)
    }
}

function security(msg){
    getId = ""
    for(i in dataAll){
        if(dataAll[i].name === "users"){
            for(j in dataAll[i].data){
                if(dataAll[i].data[j][0] === msg.chat.id){
                    getId = msg.chat.id
                }
            }
        }
    }
    if(getId === msg.chat.id){
        return true
    }else{    
        bot.sendMessage(msg.chat.id, `<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ !!!
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b><i>

<code>  –§–ò–û:            ... </code>/regfio
<code>  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ... </code>/regtel
<code>  –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:  ... </code>/regbirs

</i><b>–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è—Ç –¥–æ—Å—Ç—É–ø</b>`, {parse_mode:"HTML"})
    }
}
