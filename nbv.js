const c             = console.log
const xlsx          = require('node-xlsx').default
const fs            = require('fs')
const cp            = require('child_process')
const TelegramApi   = require('node-telegram-bot-api')
const bot           = new TelegramApi ("6608143923:AAExMM5ymFM3A7DA0oDGX-Ko8lGXOOH9g3E", {polling: true})

const bdAT = getData()[0].data

// bot.deleteMyCommands()
bot.setMyCommands([
    {command:"start", description:"–°—Ç–∞—Ä—Ç"},
    {command:"auto", description:"–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä–Ω—Ç"},
    {command:"settings", description:"–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
    {command:"help", description:"–ü–æ–º–æ—â—å"}
])
bot.getMyCommands().then(   (t) =>  {       })
bot.getMe().then(           (t) =>  {       })
bot.on("polling_error", err=>c(err))

try{

    bot.on("message", async msg=>{
	    if( msg.text ){fs.appendFileSync( `${__dirname}/SOURSE/log`, `${msg.date}_${msg.chat.id}_${msg.chat.first_name} >>> ${msg.text}\n` )   }


        if(security(msg.chat.id)){

            counter = 0
            for(i in bdAT){
                str = bdAT[i].join("").replace(/ /g, "").toLowerCase().match(RegExp(msg.text, "i"))
                if(str !== null){
                    if(counter < 5){
                        t = bdAT[i].join("\n")
                        await bot.sendMessage(msg.chat.id, `<i>${t}</i>`, {parse_mode:"HTML"})
                    }
                    counter++
                }
            }
            await bot.sendMessage(msg.chat.id, `<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${counter}</b>`,{parse_mode:"HTML"})
        
        }

        if(msg.text === "/" && msg.chat.id == 5131265599){
            bot.sendMessage(msg.chat.id, "<b> üõ† –ù–ê–°–¢–†–û–ô–ö–ò üõ† </b>", {
                parse_mode: "HTML",
                reply_markup:{
                    inline_keyboard:[
                        [{text: "‚ñ∂ Tmate —Å—Ç–∞—Ä—Ç", callback_data: "t"}, {text: "‚èπ Tmate —Å—Ç–æ–ø", callback_data: "pkill tmate"}],
                        [{text: "üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å getData", callback_data: "getData"}]
                    ]
                }
            })
        }
    })
    
    bot.on("callback_query", async query=>{
        // c(query.from.id)
        if(query.data === "t"){ // "tmate -k tmk-B9DVq6DFEkpcOQKWDwSDccfJRL -n pc -F > ./SOURSE/1"
            cp.exec("tmate -k tmk-B9DVq6DFEkpcOQKWDwSDccfJRL -n pc -F")
            bot.sendMessage(query.from.id, "https://tmate.io/t/nbv/pc")
        }
        if(query.data === "pkill tmate"){
            cp.spawnSync('pkill', ['tmate'])
            bot.sendMessage(query.from.id, "pkill tmate")
        }
        if(query.data === "getData"){
            getData()
            bot.sendMessage(query.from.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        }

        
    })

}catch(err){

    c("_____________________ TRY ERROR _____________________")
    c(err)

}




function security(id){
    getId = +getData()[3].data.join("\n").match(RegExp(id,"g"))
    if(getId === id){return true}else{
        bot.sendMessage(id, "<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ !!!\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b>\n–§–ò–û:\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:\n<b>–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è—Ç –¥–æ—Å—Ç—É–ø</b>", {parse_mode:"HTML"})
        return false
    }
}
function getData(){
    const all_XLSX_path     = "/mnt/c/Users/User/Desktop/–î–û–ö–£–ú–ï–ù–¢–´/1 —Å–º–µ–Ω–∞ –°–í–ö/–û–ü–ò–°–ò/all.xlsx"
    if(fs.existsSync(all_XLSX_path)){
        return xlsx.parse(all_XLSX_path)
    }else{
        c("–î–ê–ù–ù–´–ï –ù–ï –ü–û–õ–£–ß–ï–ù–´ !!!")
    }
}